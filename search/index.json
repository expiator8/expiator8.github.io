[{"content":" 1 2 git stash git pull origin master git stash로 변경사항 임시저장하고 pull하면 됨\n","date":"2024-08-27T00:00:00Z","permalink":"http://localhost:1313/p/git-pull-%EC%97%90%EB%9F%AC-error-your-local-changes-to-the-following-files-would-be-overwritten-by-merge/","title":"git pull 에러 - error: Your local changes to the following files would be overwritten by merge"},{"content":" 1 git push origin HEAD:main 하면 됨\n","date":"2024-08-27T00:00:00Z","permalink":"http://localhost:1313/p/git-push-%EC%97%90%EB%9F%AC-error-src-refspec-master-does-not-match-any.-error-failed-to-push-some-refs-to-ssh/xxxxx.com/project.git/","title":"git push 에러 - error: src refspec master does not match any. error: failed to push some refs to 'ssh://xxxxx.com/project.git'"},{"content":"Git 명령어 간단 정리 Git 저장소로 초기화 1 git init 원격 저장소 연결 1 git remote add origin [원격 저장소 url] -원격 저장소를 현재 로컬 Git 저장소에 연결\n변경된 파일 추가 1 git add [파일명] -현재 디렉토리의 변경된 파일을 스테이지에 추가\ne.g.\n1 2 git add . \u0026gt; 모든 변경된 파일 추가 git add models/users.py \u0026gt; users.py 파일만 추가 추가된 파일 커밋 1 git commit -m \u0026#34;message\u0026#34; -스테이지에 추가된 파일들을 커밋해 로컬 Git 저장소에 저장\n커밋 반영 1 git push origin main -로컬 저장소 main 브랜치의 커밋을 원격 저장소의 main 브랜치로 반영\n1 git push -u origin main --u옵션: \u0026ndash;set-upstream의 축약형\n--u옵션을 사용하고 브랜치를 설정한 이후부터는 원격 브랜치를 명시하지 않아도 자동 추적\ni.e. git push, git pull만 해도 origin main 브랜치로 명령 동작\n1 git push -f origin main --f옵션: 강제 반영. 로컬 저장소의 커밋을 원격 저장소의 커밋에 덮어쓰기.\n-권장xx 쓴다면 주의 또 주의. 코드 다날라간다\n브랜치 생성 1 git branch main -main 브랜치 생성\n변경 1 git branch -M main -현재 브랜치의 이름을 main으로 변경\n-이미 main 브랜치가 존재한다면 덮어씀\n1 git branch -m master main -현재 브랜치의 이름을 main으로 변경\n-이미 main 브랜치가 존재한다면 오류 발생\n삭제 1 git branch -d main -main 브랜치 삭제\n전환 1 git switch main -이미 있는 main 브랜치로 전환\n1 git switch -c main --c옵션: main 브랜치 생성 및 전환\n** git checkout 명령어가 브랜치 전환, 파일 복원 두가지 기능이 있는데\nswitch는 브랜지 전환, restore은 파일 복원으로 보다 직관적으로 분리된 명령어임\n최신상태 가져오기 1 git fetch --all -모든 원격 저장소에서 최신 브랜치, 커밋, 태그 정보를 가져옴\n-로컬 브랜치에는 영향을 미치지 않고, 원격 저장소의 변경 사항을 업데이트만 한다\n클론 1 git clone [원격 저장소 url] -원격 저장소를 로컬로 복제. 원격 저장소의 모든 브랜치, 커밋, 태그를 포함해 새로운 디렉토리로 복사\n리셋 1 git reset 현재 브랜치의 HEAD를 지정한 커밋 등으로 이동 HEAD1는 현재 HEAD 위치에서 1개. 즉 최근 커밋 1개 HEAD2는 HEAD 위치에서부터 커밋 2개\n1 git reset --soft HEAD~1 --soft: 커밋을 되돌리되, 변경 사항은 스테이징 영역에 유지\n1 git reset --mixed HEAD~1 --mixed (default): 커밋을 되돌리고, 변경 사항을 작업 디렉토리에 유지. 스테이징 영역은 초기화\n1 git reset --hard HEAD~1 --hard: 커밋을 되돌리고, 변경 사항을 작업 디렉토리와 스테이징 영역에서 모두 삭제.\n주의: 되돌린 변경 사항은 복구 불가!\n1 git reset --hard origin/main 원격 저장소의 main 브랜치의 최근 상태로 리셋\n임시저장 1 git stash 임시저장하기\n1 git stash list 임시저장 목록 확인\n1 git stash apply 가장 최근 stash 불러오기\n1 git stash apply [stash 이름] 해당 이름의 stash 불러오기\n1 git stash drop 가장 최근 stash 삭제\n1 git stash drop [stash 이름] 해당 이름의 stash 삭제\n1 git stash pop apply + drop\n","date":"2024-08-27T00:00:00Z","permalink":"http://localhost:1313/p/git-%EB%AA%85%EB%A0%B9%EC%96%B4-%EA%B0%84%EB%8B%A8-%EC%A0%95%EB%A6%AC/","title":"Git 명령어 간단 정리"}]